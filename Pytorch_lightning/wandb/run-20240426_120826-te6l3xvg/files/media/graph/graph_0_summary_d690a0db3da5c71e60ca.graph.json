{"format": "torch", "nodes": [{"name": "transform", "id": 1737940674912, "class_name": "GeneralizedRCNNTransform(\n    Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])\n    Resize(min_size=(320,), max_size=640, mode='bilinear')\n)", "parameters": [], "output_shape": [[], []], "num_parameters": []}, {"name": "backbone", "id": 1738471871824, "class_name": "BackboneWithFPN(\n  (body): IntermediateLayerGetter(\n    (0): Conv2dNormActivation(\n      (0): Conv2d(3, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n      (1): FrozenBatchNorm2d(16, eps=1e-05)\n      (2): Hardswish()\n    )\n    (1): InvertedResidual(\n      (block): Sequential(\n        (0): Conv2dNormActivation(\n          (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)\n          (1): FrozenBatchNorm2d(16, eps=1e-05)\n          (2): ReLU(inplace=True)\n        )\n        (1): Conv2dNormActivation(\n          (0): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (1): FrozenBatchNorm2d(16, eps=1e-05)\n        )\n      )\n    )\n    (2): InvertedResidual(\n      (block): Sequential(\n        (0): Conv2dNormActivation(\n          (0): Conv2d(16, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (1): FrozenBatchNorm2d(64, eps=1e-05)\n          (2): ReLU(inplace=True)\n        )\n        (1): Conv2dNormActivation(\n          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=64, bias=False)\n          (1): FrozenBatchNorm2d(64, eps=1e-05)\n          (2): ReLU(inplace=True)\n        )\n        (2): Conv2dNormActivation(\n          (0): Conv2d(64, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (1): FrozenBatchNorm2d(24, eps=1e-05)\n        )\n      )\n    )\n    (3): InvertedResidual(\n      (block): Sequential(\n        (0): Conv2dNormActivation(\n          (0): Conv2d(24, 72, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (1): FrozenBatchNorm2d(72, eps=1e-05)\n          (2): ReLU(inplace=True)\n        )\n        (1): Conv2dNormActivation(\n          (0): Conv2d(72, 72, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=72, bias=False)\n          (1): FrozenBatchNorm2d(72, eps=1e-05)\n          (2): ReLU(inplace=True)\n        )\n        (2): Conv2dNormActivation(\n          (0): Conv2d(72, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (1): FrozenBatchNorm2d(24, eps=1e-05)\n        )\n      )\n    )\n    (4): InvertedResidual(\n      (block): Sequential(\n        (0): Conv2dNormActivation(\n          (0): Conv2d(24, 72, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (1): FrozenBatchNorm2d(72, eps=1e-05)\n          (2): ReLU(inplace=True)\n        )\n        (1): Conv2dNormActivation(\n          (0): Conv2d(72, 72, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=72, bias=False)\n          (1): FrozenBatchNorm2d(72, eps=1e-05)\n          (2): ReLU(inplace=True)\n        )\n        (2): SqueezeExcitation(\n          (avgpool): AdaptiveAvgPool2d(output_size=1)\n          (fc1): Conv2d(72, 24, kernel_size=(1, 1), stride=(1, 1))\n          (fc2): Conv2d(24, 72, kernel_size=(1, 1), stride=(1, 1))\n          (activation): ReLU()\n          (scale_activation): Hardsigmoid()\n        )\n        (3): Conv2dNormActivation(\n          (0): Conv2d(72, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (1): FrozenBatchNorm2d(40, eps=1e-05)\n        )\n      )\n    )\n    (5): InvertedResidual(\n      (block): Sequential(\n        (0): Conv2dNormActivation(\n          (0): Conv2d(40, 120, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (1): FrozenBatchNorm2d(120, eps=1e-05)\n          (2): ReLU(inplace=True)\n        )\n        (1): Conv2dNormActivation(\n          (0): Conv2d(120, 120, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=120, bias=False)\n          (1): FrozenBatchNorm2d(120, eps=1e-05)\n          (2): ReLU(inplace=True)\n        )\n        (2): SqueezeExcitation(\n          (avgpool): AdaptiveAvgPool2d(output_size=1)\n          (fc1): Conv2d(120, 32, kernel_size=(1, 1), stride=(1, 1))\n          (fc2): Conv2d(32, 120, kernel_size=(1, 1), stride=(1, 1))\n          (activation): ReLU()\n          (scale_activation): Hardsigmoid()\n        )\n        (3): Conv2dNormActivation(\n          (0): Conv2d(120, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (1): FrozenBatchNorm2d(40, eps=1e-05)\n        )\n      )\n    )\n    (6): InvertedResidual(\n      (block): Sequential(\n        (0): Conv2dNormActivation(\n          (0): Conv2d(40, 120, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (1): FrozenBatchNorm2d(120, eps=1e-05)\n          (2): ReLU(inplace=True)\n        )\n        (1): Conv2dNormActivation(\n          (0): Conv2d(120, 120, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=120, bias=False)\n          (1): FrozenBatchNorm2d(120, eps=1e-05)\n          (2): ReLU(inplace=True)\n        )\n        (2): SqueezeExcitation(\n          (avgpool): AdaptiveAvgPool2d(output_size=1)\n          (fc1): Conv2d(120, 32, kernel_size=(1, 1), stride=(1, 1))\n          (fc2): Conv2d(32, 120, kernel_size=(1, 1), stride=(1, 1))\n          (activation): ReLU()\n          (scale_activation): Hardsigmoid()\n        )\n        (3): Conv2dNormActivation(\n          (0): Conv2d(120, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (1): FrozenBatchNorm2d(40, eps=1e-05)\n        )\n      )\n    )\n    (7): InvertedResidual(\n      (block): Sequential(\n        (0): Conv2dNormActivation(\n          (0): Conv2d(40, 240, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (1): FrozenBatchNorm2d(240, eps=1e-05)\n          (2): Hardswish()\n        )\n        (1): Conv2dNormActivation(\n          (0): Conv2d(240, 240, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=240, bias=False)\n          (1): FrozenBatchNorm2d(240, eps=1e-05)\n          (2): Hardswish()\n        )\n        (2): Conv2dNormActivation(\n          (0): Conv2d(240, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (1): FrozenBatchNorm2d(80, eps=1e-05)\n        )\n      )\n    )\n    (8): InvertedResidual(\n      (block): Sequential(\n        (0): Conv2dNormActivation(\n          (0): Conv2d(80, 200, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (1): FrozenBatchNorm2d(200, eps=1e-05)\n          (2): Hardswish()\n        )\n        (1): Conv2dNormActivation(\n          (0): Conv2d(200, 200, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=200, bias=False)\n          (1): FrozenBatchNorm2d(200, eps=1e-05)\n          (2): Hardswish()\n        )\n        (2): Conv2dNormActivation(\n          (0): Conv2d(200, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (1): FrozenBatchNorm2d(80, eps=1e-05)\n        )\n      )\n    )\n    (9): InvertedResidual(\n      (block): Sequential(\n        (0): Conv2dNormActivation(\n          (0): Conv2d(80, 184, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (1): FrozenBatchNorm2d(184, eps=1e-05)\n          (2): Hardswish()\n        )\n        (1): Conv2dNormActivation(\n          (0): Conv2d(184, 184, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=184, bias=False)\n          (1): FrozenBatchNorm2d(184, eps=1e-05)\n          (2): Hardswish()\n        )\n        (2): Conv2dNormActivation(\n          (0): Conv2d(184, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (1): FrozenBatchNorm2d(80, eps=1e-05)\n        )\n      )\n    )\n    (10): InvertedResidual(\n      (block): Sequential(\n        (0): Conv2dNormActivation(\n          (0): Conv2d(80, 184, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (1): FrozenBatchNorm2d(184, eps=1e-05)\n          (2): Hardswish()\n        )\n        (1): Conv2dNormActivation(\n          (0): Conv2d(184, 184, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=184, bias=False)\n          (1): FrozenBatchNorm2d(184, eps=1e-05)\n          (2): Hardswish()\n        )\n        (2): Conv2dNormActivation(\n          (0): Conv2d(184, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (1): FrozenBatchNorm2d(80, eps=1e-05)\n        )\n      )\n    )\n    (11): InvertedResidual(\n      (block): Sequential(\n        (0): Conv2dNormActivation(\n          (0): Conv2d(80, 480, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (1): FrozenBatchNorm2d(480, eps=1e-05)\n          (2): Hardswish()\n        )\n        (1): Conv2dNormActivation(\n          (0): Conv2d(480, 480, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=480, bias=False)\n          (1): FrozenBatchNorm2d(480, eps=1e-05)\n          (2): Hardswish()\n        )\n        (2): SqueezeExcitation(\n          (avgpool): AdaptiveAvgPool2d(output_size=1)\n          (fc1): Conv2d(480, 120, kernel_size=(1, 1), stride=(1, 1))\n          (fc2): Conv2d(120, 480, kernel_size=(1, 1), stride=(1, 1))\n          (activation): ReLU()\n          (scale_activation): Hardsigmoid()\n        )\n        (3): Conv2dNormActivation(\n          (0): Conv2d(480, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (1): FrozenBatchNorm2d(112, eps=1e-05)\n        )\n      )\n    )\n    (12): InvertedResidual(\n      (block): Sequential(\n        (0): Conv2dNormActivation(\n          (0): Conv2d(112, 672, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (1): FrozenBatchNorm2d(672, eps=1e-05)\n          (2): Hardswish()\n        )\n        (1): Conv2dNormActivation(\n          (0): Conv2d(672, 672, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=672, bias=False)\n          (1): FrozenBatchNorm2d(672, eps=1e-05)\n          (2): Hardswish()\n        )\n        (2): SqueezeExcitation(\n          (avgpool): AdaptiveAvgPool2d(output_size=1)\n          (fc1): Conv2d(672, 168, kernel_size=(1, 1), stride=(1, 1))\n          (fc2): Conv2d(168, 672, kernel_size=(1, 1), stride=(1, 1))\n          (activation): ReLU()\n          (scale_activation): Hardsigmoid()\n        )\n        (3): Conv2dNormActivation(\n          (0): Conv2d(672, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (1): FrozenBatchNorm2d(112, eps=1e-05)\n        )\n      )\n    )\n    (13): InvertedResidual(\n      (block): Sequential(\n        (0): Conv2dNormActivation(\n          (0): Conv2d(112, 672, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (1): FrozenBatchNorm2d(672, eps=1e-05)\n          (2): Hardswish()\n        )\n        (1): Conv2dNormActivation(\n          (0): Conv2d(672, 672, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=672, bias=False)\n          (1): FrozenBatchNorm2d(672, eps=1e-05)\n          (2): Hardswish()\n        )\n        (2): SqueezeExcitation(\n          (avgpool): AdaptiveAvgPool2d(output_size=1)\n          (fc1): Conv2d(672, 168, kernel_size=(1, 1), stride=(1, 1))\n          (fc2): Conv2d(168, 672, kernel_size=(1, 1), stride=(1, 1))\n          (activation): ReLU()\n          (scale_activation): Hardsigmoid()\n        )\n        (3): Conv2dNormActivation(\n          (0): Conv2d(672, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (1): FrozenBatchNorm2d(160, eps=1e-05)\n        )\n      )\n    )\n    (14): InvertedResidual(\n      (block): Sequential(\n        (0): Conv2dNormActivation(\n          (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (1): FrozenBatchNorm2d(960, eps=1e-05)\n          (2): Hardswish()\n        )\n        (1): Conv2dNormActivation(\n          (0): Conv2d(960, 960, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=960, bias=False)\n          (1): FrozenBatchNorm2d(960, eps=1e-05)\n          (2): Hardswish()\n        )\n        (2): SqueezeExcitation(\n          (avgpool): AdaptiveAvgPool2d(output_size=1)\n          (fc1): Conv2d(960, 240, kernel_size=(1, 1), stride=(1, 1))\n          (fc2): Conv2d(240, 960, kernel_size=(1, 1), stride=(1, 1))\n          (activation): ReLU()\n          (scale_activation): Hardsigmoid()\n        )\n        (3): Conv2dNormActivation(\n          (0): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (1): FrozenBatchNorm2d(160, eps=1e-05)\n        )\n      )\n    )\n    (15): InvertedResidual(\n      (block): Sequential(\n        (0): Conv2dNormActivation(\n          (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (1): FrozenBatchNorm2d(960, eps=1e-05)\n          (2): Hardswish()\n        )\n        (1): Conv2dNormActivation(\n          (0): Conv2d(960, 960, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=960, bias=False)\n          (1): FrozenBatchNorm2d(960, eps=1e-05)\n          (2): Hardswish()\n        )\n        (2): SqueezeExcitation(\n          (avgpool): AdaptiveAvgPool2d(output_size=1)\n          (fc1): Conv2d(960, 240, kernel_size=(1, 1), stride=(1, 1))\n          (fc2): Conv2d(240, 960, kernel_size=(1, 1), stride=(1, 1))\n          (activation): ReLU()\n          (scale_activation): Hardsigmoid()\n        )\n        (3): Conv2dNormActivation(\n          (0): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (1): FrozenBatchNorm2d(160, eps=1e-05)\n        )\n      )\n    )\n    (16): Conv2dNormActivation(\n      (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (1): FrozenBatchNorm2d(960, eps=1e-05)\n      (2): Hardswish()\n    )\n  )\n  (fpn): FeaturePyramidNetwork(\n    (inner_blocks): ModuleList(\n      (0): Conv2dNormActivation(\n        (0): Conv2d(160, 256, kernel_size=(1, 1), stride=(1, 1))\n      )\n      (1): Conv2dNormActivation(\n        (0): Conv2d(960, 256, kernel_size=(1, 1), stride=(1, 1))\n      )\n    )\n    (layer_blocks): ModuleList(\n      (0-1): 2 x Conv2dNormActivation(\n        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      )\n    )\n    (extra_blocks): LastLevelMaxPool()\n  )\n)", "parameters": [["body.0.0.weight", [16, 3, 3, 3]], ["body.1.block.0.0.weight", [16, 1, 3, 3]], ["body.1.block.1.0.weight", [16, 16, 1, 1]], ["body.2.block.0.0.weight", [64, 16, 1, 1]], ["body.2.block.1.0.weight", [64, 1, 3, 3]], ["body.2.block.2.0.weight", [24, 64, 1, 1]], ["body.3.block.0.0.weight", [72, 24, 1, 1]], ["body.3.block.1.0.weight", [72, 1, 3, 3]], ["body.3.block.2.0.weight", [24, 72, 1, 1]], ["body.4.block.0.0.weight", [72, 24, 1, 1]], ["body.4.block.1.0.weight", [72, 1, 5, 5]], ["body.4.block.2.fc1.weight", [24, 72, 1, 1]], ["body.4.block.2.fc1.bias", [24]], ["body.4.block.2.fc2.weight", [72, 24, 1, 1]], ["body.4.block.2.fc2.bias", [72]], ["body.4.block.3.0.weight", [40, 72, 1, 1]], ["body.5.block.0.0.weight", [120, 40, 1, 1]], ["body.5.block.1.0.weight", [120, 1, 5, 5]], ["body.5.block.2.fc1.weight", [32, 120, 1, 1]], ["body.5.block.2.fc1.bias", [32]], ["body.5.block.2.fc2.weight", [120, 32, 1, 1]], ["body.5.block.2.fc2.bias", [120]], ["body.5.block.3.0.weight", [40, 120, 1, 1]], ["body.6.block.0.0.weight", [120, 40, 1, 1]], ["body.6.block.1.0.weight", [120, 1, 5, 5]], ["body.6.block.2.fc1.weight", [32, 120, 1, 1]], ["body.6.block.2.fc1.bias", [32]], ["body.6.block.2.fc2.weight", [120, 32, 1, 1]], ["body.6.block.2.fc2.bias", [120]], ["body.6.block.3.0.weight", [40, 120, 1, 1]], ["body.7.block.0.0.weight", [240, 40, 1, 1]], ["body.7.block.1.0.weight", [240, 1, 3, 3]], ["body.7.block.2.0.weight", [80, 240, 1, 1]], ["body.8.block.0.0.weight", [200, 80, 1, 1]], ["body.8.block.1.0.weight", [200, 1, 3, 3]], ["body.8.block.2.0.weight", [80, 200, 1, 1]], ["body.9.block.0.0.weight", [184, 80, 1, 1]], ["body.9.block.1.0.weight", [184, 1, 3, 3]], ["body.9.block.2.0.weight", [80, 184, 1, 1]], ["body.10.block.0.0.weight", [184, 80, 1, 1]], ["body.10.block.1.0.weight", [184, 1, 3, 3]], ["body.10.block.2.0.weight", [80, 184, 1, 1]], ["body.11.block.0.0.weight", [480, 80, 1, 1]], ["body.11.block.1.0.weight", [480, 1, 3, 3]], ["body.11.block.2.fc1.weight", [120, 480, 1, 1]], ["body.11.block.2.fc1.bias", [120]], ["body.11.block.2.fc2.weight", [480, 120, 1, 1]], ["body.11.block.2.fc2.bias", [480]], ["body.11.block.3.0.weight", [112, 480, 1, 1]], ["body.12.block.0.0.weight", [672, 112, 1, 1]], ["body.12.block.1.0.weight", [672, 1, 3, 3]], ["body.12.block.2.fc1.weight", [168, 672, 1, 1]], ["body.12.block.2.fc1.bias", [168]], ["body.12.block.2.fc2.weight", [672, 168, 1, 1]], ["body.12.block.2.fc2.bias", [672]], ["body.12.block.3.0.weight", [112, 672, 1, 1]], ["body.13.block.0.0.weight", [672, 112, 1, 1]], ["body.13.block.1.0.weight", [672, 1, 5, 5]], ["body.13.block.2.fc1.weight", [168, 672, 1, 1]], ["body.13.block.2.fc1.bias", [168]], ["body.13.block.2.fc2.weight", [672, 168, 1, 1]], ["body.13.block.2.fc2.bias", [672]], ["body.13.block.3.0.weight", [160, 672, 1, 1]], ["body.14.block.0.0.weight", [960, 160, 1, 1]], ["body.14.block.1.0.weight", [960, 1, 5, 5]], ["body.14.block.2.fc1.weight", [240, 960, 1, 1]], ["body.14.block.2.fc1.bias", [240]], ["body.14.block.2.fc2.weight", [960, 240, 1, 1]], ["body.14.block.2.fc2.bias", [960]], ["body.14.block.3.0.weight", [160, 960, 1, 1]], ["body.15.block.0.0.weight", [960, 160, 1, 1]], ["body.15.block.1.0.weight", [960, 1, 5, 5]], ["body.15.block.2.fc1.weight", [240, 960, 1, 1]], ["body.15.block.2.fc1.bias", [240]], ["body.15.block.2.fc2.weight", [960, 240, 1, 1]], ["body.15.block.2.fc2.bias", [960]], ["body.15.block.3.0.weight", [160, 960, 1, 1]], ["body.16.0.weight", [960, 160, 1, 1]], ["fpn.inner_blocks.0.0.weight", [256, 160, 1, 1]], ["fpn.inner_blocks.0.0.bias", [256]], ["fpn.inner_blocks.1.0.weight", [256, 960, 1, 1]], ["fpn.inner_blocks.1.0.bias", [256]], ["fpn.layer_blocks.0.0.weight", [256, 256, 3, 3]], ["fpn.layer_blocks.0.0.bias", [256]], ["fpn.layer_blocks.1.0.weight", [256, 256, 3, 3]], ["fpn.layer_blocks.1.0.bias", [256]]], "output_shape": [[[[0]], [[0]], [[0], [0], 0, [0]]]], "num_parameters": [432, 144, 256, 1024, 576, 1536, 1728, 648, 1728, 1728, 1800, 1728, 24, 1728, 72, 2880, 4800, 3000, 3840, 32, 3840, 120, 4800, 4800, 3000, 3840, 32, 3840, 120, 4800, 9600, 2160, 19200, 16000, 1800, 16000, 14720, 1656, 14720, 14720, 1656, 14720, 38400, 4320, 57600, 120, 57600, 480, 53760, 75264, 6048, 112896, 168, 112896, 672, 75264, 75264, 16800, 112896, 168, 112896, 672, 107520, 153600, 24000, 230400, 240, 230400, 960, 153600, 153600, 24000, 230400, 240, 230400, 960, 153600, 153600, 40960, 256, 245760, 256, 589824, 256, 589824, 256]}, {"name": "rpn", "id": 1737940251232, "class_name": "RegionProposalNetwork(\n  (anchor_generator): AnchorGenerator()\n  (head): RPNHead(\n    (conv): Sequential(\n      (0): Conv2dNormActivation(\n        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n        (1): ReLU(inplace=True)\n      )\n    )\n    (cls_logits): Conv2d(256, 15, kernel_size=(1, 1), stride=(1, 1))\n    (bbox_pred): Conv2d(256, 60, kernel_size=(1, 1), stride=(1, 1))\n  )\n)", "parameters": [["head.conv.0.0.weight", [256, 256, 3, 3]], ["head.conv.0.0.bias", [256]], ["head.cls_logits.weight", [15, 256, 1, 1]], ["head.cls_logits.bias", [15]], ["head.bbox_pred.weight", [60, 256, 1, 1]], ["head.bbox_pred.bias", [60]]], "output_shape": [[[2, 4], [16, 4], [12, 4], [22, 4]], []], "num_parameters": [589824, 256, 3840, 15, 15360, 60]}, {"name": "roi_heads", "id": 1737940674720, "class_name": "RoIHeads(\n  (box_roi_pool): MultiScaleRoIAlign(featmap_names=['0', '1', '2', '3'], output_size=(7, 7), sampling_ratio=2)\n  (box_head): TwoMLPHead(\n    (fc6): Linear(in_features=12544, out_features=1024, bias=True)\n    (fc7): Linear(in_features=1024, out_features=1024, bias=True)\n  )\n  (box_predictor): FastRCNNPredictor(\n    (cls_score): Linear(in_features=1024, out_features=91, bias=True)\n    (bbox_pred): Linear(in_features=1024, out_features=364, bias=True)\n  )\n)", "parameters": [["box_head.fc6.weight", [1024, 12544]], ["box_head.fc6.bias", [1024]], ["box_head.fc7.weight", [1024, 1024]], ["box_head.fc7.bias", [1024]], ["box_predictor.cls_score.weight", [91, 1024]], ["box_predictor.cls_score.bias", [91]], ["box_predictor.bbox_pred.weight", [364, 1024]], ["box_predictor.bbox_pred.bias", [364]]], "output_shape": [[[[[0], [0], [0], [0], [0]], [[0], [0], 0, 0, 0, 0], [0, [0], 0, [0], 0, 0]], [0, 0, 0], [0, 0, 0], [0, 0, 0]], []], "num_parameters": [12845056, 1024, 1048576, 1024, 93184, 91, 372736, 364]}], "edges": []}